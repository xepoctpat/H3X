# Dockerfile for Babillon API Server
FROM node:18-alpine

WORKDIR /app

# Install dependencies
RUN npm init -y && \
    npm install express cors body-parser fs-extra sqlite3

# Create API server
RUN echo 'const express = require("express"); \
const cors = require("cors"); \
const bodyParser = require("body-parser"); \
const fs = require("fs-extra"); \
const path = require("path"); \
const app = express(); \
const PORT = process.env.PORT || 3001; \
const DATA_PATH = process.env.DATA_PATH || "/app/data"; \
\
app.use(cors()); \
app.use(bodyParser.json()); \
\
// Ensure data directory exists \
fs.ensureDirSync(DATA_PATH); \
fs.ensureDirSync(path.join(DATA_PATH, "cells")); \
fs.ensureDirSync(path.join(DATA_PATH, "proof")); \
\
// API Routes \
app.get("/api/cells", async (req, res) => { \
  try { \
    const cellsFile = path.join(DATA_PATH, "cells", "cells.json"); \
    if (await fs.pathExists(cellsFile)) { \
      const data = await fs.readJson(cellsFile); \
      res.json(data); \
    } else { \
      res.json([]); \
    } \
  } catch (error) { \
    res.status(500).json({ error: error.message }); \
  } \
}); \
\
app.post("/api/cells", async (req, res) => { \
  try { \
    const cellsFile = path.join(DATA_PATH, "cells", "cells.json"); \
    await fs.writeJson(cellsFile, req.body, { spaces: 2 }); \
    res.json({ status: "ok" }); \
  } catch (error) { \
    res.status(500).json({ error: error.message }); \
  } \
}); \
\
app.get("/api/proof/:filename", async (req, res) => { \
  try { \
    const filename = req.params.filename; \
    const filePath = path.join(DATA_PATH, "proof", filename); \
    if (await fs.pathExists(filePath)) { \
      const content = await fs.readFile(filePath, "utf8"); \
      res.json({ content }); \
    } else { \
      res.status(404).json({ error: "File not found" }); \
    } \
  } catch (error) { \
    res.status(500).json({ error: error.message }); \
  } \
}); \
\
app.post("/api/proof/:filename", async (req, res) => { \
  try { \
    const filename = req.params.filename; \
    const filePath = path.join(DATA_PATH, "proof", filename); \
    await fs.writeFile(filePath, req.body.content, "utf8"); \
    res.json({ status: "ok" }); \
  } catch (error) { \
    res.status(500).json({ error: error.message }); \
  } \
}); \
\
app.listen(PORT, "0.0.0.0", () => { \
  console.log(`Babillon API server running on port ${PORT}`); \
});' > api-server.js

# Copy data files
COPY proof/ ./data/proof/

# Expose port
EXPOSE 3001

# Start the API server
CMD ["node", "api-server.js"]
