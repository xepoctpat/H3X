# Dockerfile for Babillon Agent Controller
FROM node:18-alpine

WORKDIR /app

# Install dependencies
RUN npm init -y && \
    npm install express ws axios uuid

# Create agent controller
RUN echo 'const express = require("express"); \
const WebSocket = require("ws"); \
const axios = require("axios"); \
const { v4: uuidv4 } = require("uuid"); \
const app = express(); \
const PORT = process.env.PORT || 3002; \
const API_URL = process.env.API_URL || "http://localhost:3001"; \
\
app.use(express.json()); \
\
// Agent registry \
const agents = new Map(); \
\
// WebSocket server for real-time communication \
const wss = new WebSocket.Server({ port: PORT + 1 }); \
\
wss.on("connection", (ws) => { \
  const agentId = uuidv4(); \
  agents.set(agentId, { id: agentId, ws, status: "connected" }); \
  \
  ws.on("message", async (message) => { \
    try { \
      const data = JSON.parse(message); \
      await handleAgentMessage(agentId, data); \
    } catch (error) { \
      ws.send(JSON.stringify({ error: error.message })); \
    } \
  }); \
  \
  ws.on("close", () => { \
    agents.delete(agentId); \
  }); \
}); \
\
async function handleAgentMessage(agentId, message) { \
  const agent = agents.get(agentId); \
  if (!agent) return; \
  \
  switch (message.type) { \
    case "navigate": \
      // Handle navigation commands \
      agent.ws.send(JSON.stringify({ \
        type: "navigation_result", \
        success: true, \
        position: { q: message.q, r: message.r } \
      })); \
      break; \
    case "createLoop": \
      // Handle loop creation \
      agent.ws.send(JSON.stringify({ \
        type: "loop_result", \
        success: true, \
        loop: { a: message.a, b: message.b, coupled: message.coupled } \
      })); \
      break; \
    default: \
      agent.ws.send(JSON.stringify({ error: "Unknown command" })); \
  } \
} \
\
// REST API for agent management \
app.get("/api/agents", (req, res) => { \
  const agentList = Array.from(agents.values()).map(agent => ({ \
    id: agent.id, \
    status: agent.status \
  })); \
  res.json(agentList); \
}); \
\
app.post("/api/agents/:id/command", async (req, res) => { \
  const agent = agents.get(req.params.id); \
  if (!agent) { \
    return res.status(404).json({ error: "Agent not found" }); \
  } \
  \
  agent.ws.send(JSON.stringify(req.body)); \
  res.json({ status: "command_sent" }); \
}); \
\
app.listen(PORT, "0.0.0.0", () => { \
  console.log(`Babillon agent controller running on port ${PORT}`); \
  console.log(`WebSocket server running on port ${PORT + 1}`); \
});' > agent-controller.js

# Expose ports
EXPOSE 3002 3003

# Start the agent controller
CMD ["node", "agent-controller.js"]
