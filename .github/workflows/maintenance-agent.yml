name: H3X Remote Maintenance Agent

on:
  schedule:
    # Run every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      command:
        description: 'Maintenance command to run'
        required: true
        default: 'run'
        type: choice
        options:
          - run
          - health
          - conflicts
          - prs
          - branches
          - dependencies
          - security
      force:
        description: 'Force execution even if conditions are not met'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  maintenance:
    name: Repository Maintenance
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
      security-events: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "H3X Maintenance Agent"
          git config --global user.email "maintenance@h3x.dev"

      - name: Run Maintenance Agent
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
        run: |
          command="${{ github.event.inputs.command || 'run' }}"
          echo "Running maintenance command: $command"
          npx tsx Scripts/remote-maintenance-agent.ts "$command"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-logs-${{ github.run_number }}
          path: logs/maintenance-agent.log
          retention-days: 30

  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Health Check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx tsx Scripts/remote-maintenance-agent.ts health

      - name: Create Issue on Health Check Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'ðŸš¨ System Health Check Failed';
            const body = `
            ## Health Check Failure
            
            The automated health check has detected issues with the H3X system.
            
            **Run Details:**
            - Workflow: ${{ github.workflow }}
            - Run ID: ${{ github.run_id }}
            - Timestamp: ${{ github.event.head_commit.timestamp }}
            
            **Next Steps:**
            1. Review the workflow logs for detailed error information
            2. Check system components for issues
            3. Run manual diagnostics if needed
            
            **Logs:**
            [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            *This issue was automatically created by the H3X Maintenance Agent*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['health-check', 'automated', 'high-priority']
            });

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Security Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx tsx Scripts/remote-maintenance-agent.ts security

      - name: Run npm audit
        run: npm audit --audit-level=moderate

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Dependencies
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx tsx Scripts/remote-maintenance-agent.ts dependencies

      - name: Check for outdated packages
        run: npm outdated || true

  conflict-resolution:
    name: Conflict Resolution
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.command == 'conflicts'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --global user.name "H3X Maintenance Agent"
          git config --global user.email "maintenance@h3x.dev"

      - name: Resolve Conflicts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx tsx Scripts/remote-maintenance-agent.ts conflicts

  pr-management:
    name: PR Management
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.command == 'prs'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Manage Pull Requests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx tsx Scripts/remote-maintenance-agent.ts prs
