name: "H3X Complete Process Automation"

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-commit checks and quality gates
  quality-checks:
    name: "Quality & Security Checks"
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.deploy }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm ci
          npm run setup:typescript

      - name: TypeScript Conversion
        run: |
          echo "🔄 Converting JavaScript files to TypeScript..."
          npx tsx scripts/convert-js-to-ts.ts
          
      - name: Run Pre-commit Hooks
        run: |
          echo "🔍 Running pre-commit checks..."
          npx tsx scripts/pre-commit-hook.ts

      - name: Code Quality Analysis
        run: |
          npm run lint:check
          npm run format:check

      - name: Security Scan
        run: |
          npm audit --audit-level=moderate
          echo "🔒 Security scan completed"

      - name: Dependency Check
        run: |
          npm run unused:deps || echo "⚠️ Unused dependencies detected"

      - name: Detect Changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            # Check for significant changes
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
            if grep -E "(src/|scripts/|docker|package\.json)" changed_files.txt; then
              echo "deploy=true" >> $GITHUB_OUTPUT
            else
              echo "deploy=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate Version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUM="${{ github.run_number }}"
          FULL_VERSION="${VERSION}-build.${BUILD_NUM}"
          echo "version=${FULL_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${FULL_VERSION}"

  # Comprehensive testing suite
  testing:
    name: "Comprehensive Testing"
    runs-on: ubuntu-latest
    needs: quality-checks
    if: needs.quality-checks.outputs.should-deploy == 'true' && !inputs.skip_tests
    
    strategy:
      matrix:
        test-type: [unit, integration, performance, security]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Setup Test Environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to start

      - name: Run Tests
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              npm run test
              ;;
            integration)
              npm run test:integration
              ;;
            performance)
              npm run test:performance
              ;;
            security)
              npm run test:security || echo "Security tests completed with warnings"
              ;;
          esac

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            coverage/
            logs/

      - name: Cleanup Test Environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Build and containerization
  build:
    name: "Build & Containerize"
    runs-on: ubuntu-latest
    needs: [quality-checks, testing]
    if: always() && needs.quality-checks.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: |
          npm run automation:build
          npm run unified:build

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=${{ needs.quality-checks.outputs.version }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfile.h3x
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate Deployment Manifest
        run: |
          mkdir -p deployment/
          cat > deployment/deployment.yml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: h3x-unified
            labels:
              app: h3x-unified
              version: ${{ needs.quality-checks.outputs.version }}
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: h3x-unified
            template:
              metadata:
                labels:
                  app: h3x-unified
              spec:
                containers:
                - name: h3x-unified
                  image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.quality-checks.outputs.version }}
                  ports:
                  - containerPort: 4978
                  - containerPort: 8081
                  env:
                  - name: NODE_ENV
                    value: "production"
                  - name: BUILD_VERSION
                    value: "${{ needs.quality-checks.outputs.version }}"
          EOF

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment/

  # Environment-specific deployment
  deploy:
    name: "Deploy to ${{ inputs.environment || 'development' }}"
    runs-on: ubuntu-latest
    needs: [quality-checks, testing, build]
    if: always() && needs.quality-checks.outputs.should-deploy == 'true' && needs.build.result == 'success'
    environment: ${{ inputs.environment || 'development' }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Deployment Artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment/

      - name: Setup Deployment Environment
        run: |
          echo "🚀 Deploying to ${{ inputs.environment || 'development' }}"
          ENV_NAME="${{ inputs.environment || 'development' }}"
          
          # Environment-specific configurations
          case $ENV_NAME in
            development)
              echo "REPLICAS=1" >> $GITHUB_ENV
              echo "RESOURCES_CPU=100m" >> $GITHUB_ENV
              echo "RESOURCES_MEMORY=256Mi" >> $GITHUB_ENV
              ;;
            staging)
              echo "REPLICAS=2" >> $GITHUB_ENV
              echo "RESOURCES_CPU=200m" >> $GITHUB_ENV
              echo "RESOURCES_MEMORY=512Mi" >> $GITHUB_ENV
              ;;
            production)
              echo "REPLICAS=3" >> $GITHUB_ENV
              echo "RESOURCES_CPU=500m" >> $GITHUB_ENV
              echo "RESOURCES_MEMORY=1Gi" >> $GITHUB_ENV
              ;;
          esac

      - name: Deploy Application
        run: |
          echo "🚀 Starting deployment process..."
          
          # Simulate deployment (replace with actual deployment commands)
          echo "Deploying version ${{ needs.quality-checks.outputs.version }}"
          echo "Environment: ${{ inputs.environment || 'development' }}"
          echo "Replicas: $REPLICAS"
          
          # Health check simulation
          echo "🔍 Running health checks..."
          sleep 10
          echo "✅ Deployment successful!"

      - name: Run Post-Deployment Tests
        run: |
          echo "🧪 Running post-deployment verification..."
          # Add actual health checks and smoke tests here
          sleep 5
          echo "✅ Post-deployment tests passed!"

      - name: Notify Deployment Status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "✅ Deployment to ${{ inputs.environment || 'development' }} completed successfully!"
          else
            echo "❌ Deployment to ${{ inputs.environment || 'development' }} failed!"
          fi

  # Automated maintenance tasks
  maintenance:
    name: "Automated Maintenance"
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Maintenance Tasks
        run: |
          echo "🔧 Running automated maintenance tasks..."
          
          # Update dependencies
          npm update
          
          # Clean up artifacts
          npm run docker:prune || echo "Docker cleanup completed"
          
          # Generate health report
          npm run test:health > maintenance-report.txt
          
          # Backup critical configurations
          mkdir -p backups/
          cp package.json backups/package-$(date +%Y%m%d).json
          cp tsconfig.json backups/tsconfig-$(date +%Y%m%d).json

      - name: Create Maintenance PR
        if: success()
        run: |
          # Check if there are changes to commit
          if [[ -n $(git status --porcelain) ]]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            BRANCH_NAME="maintenance/automated-$(date +%Y%m%d)"
            git checkout -b $BRANCH_NAME
            git add .
            git commit -m "🔧 Automated maintenance: dependency updates and cleanup"
            git push origin $BRANCH_NAME
            
            echo "📝 Maintenance PR branch created: $BRANCH_NAME"
          else
            echo "✅ No maintenance changes required"
          fi

      - name: Upload Maintenance Report
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-report
          path: |
            maintenance-report.txt
            backups/

  # Monitoring and alerting
  monitoring:
    name: "System Monitoring"
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: Setup Monitoring
        run: |
          echo "📊 Setting up monitoring for deployment..."
          # Add monitoring setup commands here
          
      - name: Health Check Monitoring
        run: |
          echo "🔍 Running continuous health checks..."
          # Add health check commands here
          
      - name: Performance Monitoring
        run: |
          echo "⚡ Setting up performance monitoring..."
          # Add performance monitoring setup here

# Workflow status notification
  notify:
    name: "Workflow Notification"
    runs-on: ubuntu-latest
    needs: [quality-checks, testing, build, deploy, maintenance, monitoring]
    if: always()
    
    steps:
      - name: Workflow Summary
        run: |
          echo "📋 H3X Complete Process Automation Summary"
          echo "========================================"
          echo "Quality Checks: ${{ needs.quality-checks.result }}"
          echo "Testing: ${{ needs.testing.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          echo "Maintenance: ${{ needs.maintenance.result }}"
          echo "Monitoring: ${{ needs.monitoring.result }}"
          echo "Version: ${{ needs.quality-checks.outputs.version }}"
          echo "Environment: ${{ inputs.environment || 'development' }}"
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "🎉 Automation pipeline completed successfully!"
          else
            echo "⚠️ Pipeline completed with issues. Check individual job results."
          fi
