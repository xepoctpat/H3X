{
  "name": "h3x-unified",
  "version": "2.0.0",
  "description": "H3X Unified System - Hexperiment Labs SIR Control Interface with fLups Integration, Real-time Data Processing, and Adaptive Feedback Loops",
  "type": "module",
  "engines": {
    "node": "18 || 20 || 22"
  },
  "author": "Hexperiment Labs & H3X Development Team",
  "license": "MIT",
  "main": "./Src/Index.ts",
  "scripts": {
    "build": "npx tsx scripts/build-system.ts development",
    "build:prod": "npx tsx scripts/build-system.ts production",
    "build:scripts": "npx tsx scripts/build-system.ts scripts",
    "build:dev": "npx tsx scripts/build-system.ts watch",
    "build:clean": "npx tsx scripts/build-system.ts clean",
    "build:all": "npx tsx scripts/build-system.ts production",
    "type-check": "tsc --noEmit",
    "unified:start": "docker-compose -f docker-compose.unified.yml up -d",
    "unified:stop": "docker-compose -f docker-compose.unified.yml down",
    "unified:logs": "docker-compose -f docker-compose.unified.yml logs -f",
    "unified:restart": "npm run unified:stop && npm run unified:start",
    "unified:build": "docker-compose -f docker-compose.unified.yml build",
    "unified:build-no-cache": "docker-compose -f docker-compose.unified.yml build --no-cache",
    "unified:status": "docker-compose -f docker-compose.unified.yml ps",
    "unified:clean": "docker-compose -f docker-compose.unified.yml down -v --rmi all && docker system prune -f",
    "network:create": "docker network create hex-flup-network",
    "network:remove": "docker network rm hex-flup-network",
    "flups:dev": "cd flups-integration && vite",
    "flups:build": "cd flups-integration && vite build",
    "flups:preview": "cd flups-integration && vite preview",
    "data:weather": "npx tsx real-time-data/weather-ingestion.ts",
    "data:financial": "npx tsx real-time-data/financial-ingestion.ts",
    "feedback:process": "npx tsx feedback-loops/feedback-processor.ts",
    "test:integration": "npm run test:health && npm run unified:status",
    "test:unified": "npx tsx test-integration-unified.ts",
    "test:unified-quick": "npm run unified:status && npm run test:health",
    "init:databases": "docker-compose -f docker-compose.unified.yml up -d mongodb-init redis-init",
    "nginx:reload": "docker-compose -f docker-compose.unified.yml exec nginx nginx -s reload",
    "logs:all": "docker-compose -f docker-compose.unified.yml logs -f",
    "logs:nginx": "docker-compose -f docker-compose.unified.yml logs -f nginx",
    "logs:databases": "docker-compose -f docker-compose.unified.yml logs -f mongodb redis",
    "logs:data": "docker-compose -f docker-compose.unified.yml logs -f h3x-weather-ingestion h3x-financial-ingestion h3x-feedback-processor",
    "deploy:local": "npx tsx cicd-automation.ts --deploy-target local",
    "deploy:staging": "npx tsx cicd-automation.ts --environment staging --deploy-target staging",
    "deploy:production": "npx tsx cicd-automation.ts --environment production --deploy-target production",
    "pipeline:full": "npx tsx cicd-automation.ts",
    "pipeline:fast": "npx tsx cicd-automation.ts --skip-tests --force-build",
    "pipeline:debug": "npx tsx cicd-automation.ts --debug",
    "dev": "nodemon --inspect=9239 --signal SIGINT ./Src/Index.js",
    "start": "node ./Src/Index.js",
    "standalone": "env-cmd --silent -f env/.env.standalone npm run dev",
    "standalone:start": "env-cmd --silent -f env/.env.standalone npm start",
    "test": "vitest",
    "test:watch": "vitest --watch",
    "test:ui": "vitest --ui",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "test:ts": "vitest run --config ./vitest.config.ts",
    "test:ts:watch": "vitest --config ./vitest.config.ts",
    "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,md}\"",
    "format:check": "prettier --check \"**/*.{js,jsx,ts,tsx,json,md}\"",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx --fix",
    "lint:check": "eslint . --ext .js,.jsx,.ts,.tsx",
    "unused:deps": "depcheck",
    "unused:code": "echo 'Unused code detection - manual review required'",
    "watch": "nodemon --exec \"npm run start\"",
    "setup-check": "npx tsx setup-check.ts",
    "prepare": "pre-commit install || husky",
    "pre-commit": "npx tsx scripts/pre-commit-hook.ts",
    "standalone-start": "npm run setup-check && echo \"Starting standalone server...\" && npm run standalone",
    "no-openai": "npx tsx src/index.ts",
    "no-openai:dev": "nodemon --inspect=9239 --signal SIGINT src/index.js",
    "no-openai:test": "npx tsx test-client-no-openai.ts",
    "lmstudio": "npx tsx start-lmstudio.ts",
    "lmstudio:dev": "nodemon --inspect=9239 --signal SIGINT start-lmstudio.js",
    "modular": "npx tsx Start-Modular-Dashboard.ts",
    "lmstudio:test": "npx tsx test-lmstudio.ts",
    "lmstudio:test-simple": "npx tsx test-lmstudio-simple.ts",
    "lmstudio:interface": "npx tsx sir-interface.ts",
    "lmstudio:autorun": "npx tsx sir-autorun.ts start",
    "lmstudio:autorun-fast": "npx tsx sir-autorun.ts start --interval 10",
    "lmstudio:autorun-custom": "npx tsx sir-autorun.ts start --interval 60 --tasks system_status,security_monitoring",
    "lmstudio:response": "npx tsx Scripts/lmstudio-response-handler.ts",
    "lmstudio:response-docker": "npx tsx Scripts/lmstudio-response-handler.ts docker",
    "lmstudio:npm-integration": "npx tsx Scripts/npm-lmstudio-integration.ts",
    "lmstudio:docker-integration": "npx tsx Scripts/docker-lmstudio-integration.ts",
    "lmstudio:docker-up": "npx tsx Scripts/docker-lmstudio-integration.ts start",
    "lmstudio:docker-down": "npx tsx Scripts/docker-lmstudio-integration.ts stop",
    "lmstudio:docker-test": "npx tsx Scripts/docker-lmstudio-integration.ts test",
    "lmstudio:generate-docker": "npx tsx Scripts/docker-lmstudio-integration.ts generate",
    "go:fmt": "pwsh ./hexperiment-system-protocol/scripts/go-fmt.ps1",
    "go:vet": "pwsh ./hexperiment-system-protocol/scripts/go-vet.ps1",
    "go:modtidy": "pwsh ./hexperiment-system-protocol/scripts/go-mod-tidy.ps1",
    "go:test": "pwsh ./hexperiment-system-protocol/scripts/go-test.ps1",
    "docker:prune": "pwsh ./hexperiment-system-protocol/scripts/docker-prune.ps1",
    "qol:check": "pwsh ./hexperiment-system-protocol/scripts/qol-check.ps1",
    "env:switch": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1",
    "env:status": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 status",
    "env:list": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 list",
    "env:dev": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 dev -Up",
    "env:dev:build": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 dev -Up -Build",
    "env:dev:down": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 dev -Down",
    "env:dev:logs": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 dev -Logs",
    "env:prod": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 prod -Up",
    "env:prod:build": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 prod -Up -Build",
    "env:prod:down": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 prod -Down",
    "env:prod:logs": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 prod -Logs",
    "env:quick": "pwsh ./hexperiment-system-protocol/scripts/env-quick.ps1",
    "test:all": "npm run test:ts && npm run test:html && npm run test:js && npm run test:md",
    "test:html": "htmlhint ./Public/**/*.html",
    "test:js": "jshint ./Public/js/**/*.js ./Src/**/*.js",
    "test:md": "markdownlint **/*.md --ignore node_modules",
    "test:performance": "npx tsx test-performance.ts",
    "test:health": "npx tsx scripts/health-check.ts",
    "test:quick": "npm run test:health && npm run test:html",
    "setup:tools": "npm install && npx tsx setup-testing-tools.ts",
    "daily:check": "npm run test:health && npm run test:quick",
    "daily:full": "npm run test:all && npm run test:health",
    "fix:html-naming": "npx tsx scripts/fix-html-ids-classes.ts",
    "git:commit": "npx tsx scripts/git-pr-automation.ts commit",
    "git:quick-pr": "npx tsx scripts/git-pr-automation.ts quick-pr",
    "git:interactive": "npx tsx scripts/git-pr-automation.ts interactive",
    "git:changelog": "npx tsx scripts/git-pr-automation.ts changelog",
    "git:pr": "npx tsx scripts/git-pr-automation.ts pr",
    "automation:full": "npx tsx scripts/h3x-dev-automation.ts workflow full",
    "automation:lint": "npx tsx scripts/h3x-dev-automation.ts lint",
    "automation:test": "npx tsx scripts/h3x-dev-automation.ts test",
    "automation:build": "npx tsx scripts/h3x-dev-automation.ts build",
    "automation:monitor": "npx tsx scripts/h3x-dev-automation.ts workflow ci",
    "automation:fix": "npx tsx scripts/h3x-dev-automation.ts lint",
    "workflow:dev": "npx tsx scripts/workflow-orchestrator.ts run development",
    "workflow:test": "npx tsx scripts/workflow-orchestrator.ts run testing",
    "workflow:build": "npx tsx scripts/workflow-orchestrator.ts run build",
    "workflow:deploy": "npx tsx scripts/workflow-orchestrator.ts run deployment",
    "workflow:monitor": "npx tsx scripts/workflow-orchestrator.ts run monitoring",
    "workflow:maintenance": "npx tsx scripts/workflow-orchestrator.ts run maintenance",
    "workflow:list": "npx tsx scripts/workflow-orchestrator.ts list",
    "workflow:stop": "npx tsx scripts/workflow-orchestrator.ts stop",
    "quality:check": "npm run lint:check && npm run test:quick && npm run test:health",
    "quality:fix": "npm run format && npm run lint && npm run automation:fix",
    "setup:automation": "npx tsx scripts/setup-typescript-automation.ts",
    "setup:complete": "npm install && npm run setup:automation && npm run automation:full",
    "setup:typescript": "npx tsx scripts/setup-typescript-automation.ts",
    "cleanup:legacy": "npx tsx scripts/legacy-cleanup.ts --force",
    "cleanup:legacy:dry-run": "npx tsx scripts/legacy-cleanup.ts --dry-run"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com"
  },
  "dependencies": {
    "@types/three": "^0.176.0",
    "@types/ws": "^8.18.1",
    "axios": "^1.6.2",
    "chokidar": "^4.0.3",
    "concurrently": "^9.1.2",
    "cors": "^2.8.5",
    "dotenv": "^16.5.0",
    "express": "^5.0.1",
    "mongodb": "^6.3.0",
    "node-cron": "^3.0.3",
    "open": "^10.1.2",
    "redis": "^4.6.0",
    "rimraf": "^6.0.1",
    "three": "^0.176.0",
    "uuid": "^11.1.0",
    "ws": "^8.18.2",
    "zod": "^3.22.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.28.0",
    "@stylistic/eslint-plugin": "^4.4.1",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@types/express": "^5.0.2",
    "@types/glob": "^8.1.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.15.24",
    "@typescript-eslint/eslint-plugin": "^8.33.1",
    "@typescript-eslint/parser": "^8.33.1",
    "@vitest/coverage-v8": "^3.1.4",
    "@vitest/ui": "^3.1.4",
    "babel-jest": "^29.7.0",
    "depcheck": "^1.4.7",
    "env-cmd": "^10.1.0",
    "eslint": "^9.28.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.2",
    "htmlhint": "^1.1.4",
    "http-server": "^14.1.1",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "jiti": "^2.4.2",
    "jsdom": "^26.1.0",
    "jshint": "^2.13.6",
    "lint-staged": "^16.1.0",
    "markdownlint-cli": "^0.37.0",
    "nodemon": "^3.1.10",
    "prettier": "^3.5.3",
    "puppeteer": "^21.6.1",
    "sass": "^1.89.0",
    "ts-jest": "^29.3.4",
    "tsx": "^4.19.4",
    "typescript": "^5.8.3",
    "vite": "^6.3.5",
    "vitest": "^3.1.4"
  }
}
