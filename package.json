{
  "name": "h3x",
  "version": "1.0.0",
  "description": "Hexperiment Labs SIR Control Interface - Super Intelligent Regulator",
  "engines": {
    "node": "18 || 20 || 22"
  },
  "author": "Hexperiment Labs",
  "license": "MIT",
  "main": "./Src/Index.js",
  "scripts": {
    "dev": "nodemon --inspect=9239 --signal SIGINT ./Src/Index.js",
    "start": "node ./Src/Index.js",
    "standalone": "env-cmd --silent -f env/.env.standalone npm run dev",
    "standalone:start": "env-cmd --silent -f env/.env.standalone npm start",
    "test": "echo \"Error: no test specified\" && exit 1",
    "watch": "nodemon --exec \"npm run start\"",
    "setup-check": "node setup-check.js",
    "standalone-start": "npm run setup-check && echo \"Starting standalone server...\" && npm run standalone",
    "no-openai": "node src/index.js",
    "no-openai:dev": "nodemon --inspect=9239 --signal SIGINT src/index.js",
    "no-openai:test": "node test-client-no-openai.js",
    "lmstudio": "node archive/obsolete-backup-2025-05-28-t19-24-42/Start-Lmstudio.js",
    "lmstudio:dev": "nodemon --inspect=9239 --signal SIGINT archive/obsolete-backup-2025-05-28-t19-24-42/Start-Lmstudio.js",
    "modular": "node archive/obsolete-backup-2025-05-28-t19-24-42/Start-Modular-Dashboard.js",
    "lmstudio:test": "node archive/obsolete-backup-2025-05-28-t19-24-42/Test-Lmstudio.js",
    "lmstudio:test-simple": "node archive/obsolete-backup-2025-05-28-t19-24-42/Test-Lmstudio-Simple.js",
    "lmstudio:interface": "node archive/obsolete-backup-2025-05-28-t19-24-42/Sir-Interface.js",
    "lmstudio:autorun": "node archive/obsolete-backup-2025-05-28-t19-24-42/Sir-Autorun.js start",
    "lmstudio:autorun-fast": "node archive/obsolete-backup-2025-05-28-t19-24-42/Sir-Autorun.js start --interval 10",
    "lmstudio:autorun-custom": "node archive/obsolete-backup-2025-05-28-t19-24-42/Sir-Autorun.js start --interval 60 --tasks system_status,security_monitoring",
    "lmstudio:response": "node scripts/lmstudio-response-handler.js",
    "lmstudio:response-docker": "node scripts/lmstudio-response-handler.js docker",
    "lmstudio:npm-integration": "node scripts/npm-lmstudio-integration.js",
    "lmstudio:docker-integration": "node scripts/docker-lmstudio-integration.js",
    "lmstudio:docker-up": "node scripts/docker-lmstudio-integration.js start",
    "lmstudio:docker-down": "node scripts/docker-lmstudio-integration.js stop",
    "lmstudio:docker-test": "node scripts/docker-lmstudio-integration.js test",
    "lmstudio:generate-docker": "node scripts/docker-lmstudio-integration.js generate",
    "go:fmt": "pwsh ./hexperiment-system-protocol/scripts/go-fmt.ps1",
    "go:vet": "pwsh ./hexperiment-system-protocol/scripts/go-vet.ps1",
    "go:modtidy": "pwsh ./hexperiment-system-protocol/scripts/go-mod-tidy.ps1",
    "go:test": "pwsh ./hexperiment-system-protocol/scripts/go-test.ps1",
    "docker:prune": "pwsh ./hexperiment-system-protocol/scripts/docker-prune.ps1",
    "qol:check": "pwsh ./hexperiment-system-protocol/scripts/qol-check.ps1",
    "env:switch": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1",
    "env:status": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 status",
    "env:list": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 list",
    "env:dev": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 dev -Up",
    "env:dev:build": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 dev -Up -Build",
    "env:dev:down": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 dev -Down",
    "env:dev:logs": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 dev -Logs",
    "env:prod": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 prod -Up",
    "env:prod:build": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 prod -Up -Build",
    "env:prod:down": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 prod -Down",
    "env:prod:logs": "pwsh ./hexperiment-system-protocol/scripts/env-switcher.ps1 prod -Logs",
    "env:quick": "pwsh ./hexperiment-system-protocol/scripts/env-quick.ps1",
    "test:all": "npm run test:html && npm run test:js && npm run test:md",
    "test:html": "htmlhint ./Public/**/*.html",
    "test:js": "jshint ./Public/js/**/*.js ./Src/**/*.js",
    "test:md": "markdownlint **/*.md --ignore node_modules",
    "test:performance": "node test-performance.js",
    "test:health": "node scripts/health-check.js",
    "test:quick": "npm run test:health && npm run test:html",
    "scan:azure": "node scripts/azure-dependency-scanner.js",
    "iterate": "node scripts/iteration-controller.js",
    "iterate:bg": "start pwsh -Command \"node scripts/iteration-controller.js\"",
    "setup:tools": "npm install && node setup-testing-tools.js",
    "daily:check": "npm run test:health && npm run test:quick",
    "daily:full": "npm run test:all && npm run test:health",
    "fix:html-naming": "node scripts/fix-html-ids-classes.js",
    "git:commit": "node scripts/git-pr-automation.js commit",
    "git:quick-pr": "node scripts/git-pr-automation.js quick-pr",
    "git:interactive": "node scripts/git-pr-automation.js interactive",
    "git:changelog": "node scripts/git-pr-automation.js changelog",
    "git:pr": "node scripts/git-pr-automation.js pr",
    "babillon:dev": "docker-compose -f docker-compose.babillon.yml up -d",
    "babillon:dev:build": "docker-compose -f docker-compose.babillon.yml up -d --build",
    "babillon:down": "docker-compose -f docker-compose.babillon.yml down",
    "babillon:logs": "docker-compose -f docker-compose.babillon.yml logs -f",
    "babillon:web": "docker-compose -f docker-compose.babillon.yml up -d babillon-web",
    "babillon:api": "docker-compose -f docker-compose.babillon.yml up -d babillon-api",
    "babillon:agents": "docker-compose -f docker-compose.babillon.yml up -d babillon-agents",
    "babillon:unified:start": "docker-compose -f docker-compose.babillon-unified.yml up -d",
    "babillon:unified:stop": "docker-compose -f docker-compose.babillon-unified.yml down",
    "babillon:unified:restart": "npm run babillon:unified:stop && npm run babillon:unified:start",
    "babillon:unified:build": "docker-compose -f docker-compose.babillon-unified.yml build",
    "babillon:unified:build-no-cache": "docker-compose -f docker-compose.babillon-unified.yml build --no-cache",
    "babillon:unified:logs": "docker-compose -f docker-compose.babillon-unified.yml logs -f",
    "babillon:unified:status": "docker-compose -f docker-compose.babillon-unified.yml ps",
    "babillon:unified:clean": "docker-compose -f docker-compose.babillon-unified.yml down -v --rmi all",
    "babillon:unified:web": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-web",
    "babillon:unified:api": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-api",
    "babillon:unified:agents": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-agents",
    "babillon:unified:h3x": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-h3x-server",
    "babillon:unified:protocol": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-protocol",
    "babillon:unified:lmstudio": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-lmstudio",
    "babillon:unified:mongodb": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-mongodb",
    "babillon:unified:redis": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-redis",
    "babillon:unified:frontend": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-frontend",
    "babillon:unified:monitoring": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-prometheus babillon-grafana",
    "babillon:unified:sir": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-sir-controller",
    "babillon:unified:data": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-data-weather babillon-data-financial",
    "babillon:unified:feedback": "docker-compose -f docker-compose.babillon-unified.yml up -d babillon-feedback-processor",
    "babillon:network:create": "docker network create babillon-unified-network 2>/dev/null || echo 'Network already exists'",
    "babillon:network:remove": "docker network rm babillon-unified-network 2>/dev/null || echo 'Network does not exist'",
    "babillon:network:inspect": "docker network inspect babillon-unified-network",
    "babillon:health:all": "node scripts/babillon-health-check.js",
    "babillon:health:web": "curl -f http://localhost:3000/health || echo 'Web service not healthy'",
    "babillon:health:api": "curl -f http://localhost:3001/health || echo 'API service not healthy'",
    "babillon:health:agents": "curl -f http://localhost:3002/health || echo 'Agents service not healthy'",
    "babillon:health:h3x": "curl -f http://localhost:4978/api/health || echo 'H3X service not healthy'",
    "babillon:health:protocol": "curl -f http://localhost:8080/api/health || echo 'Protocol service not healthy'",
    "babillon:health:lmstudio": "curl -f http://localhost:1234/v1/models || echo 'LMStudio service not healthy'",
    "babillon:dev:unified": "docker-compose -f docker-compose.babillon-unified.yml -f docker-compose.dev.yml up",
    "babillon:test:unified": "npm run babillon:health:all && npm run test:integration",
    "babillon:test:unified-quick": "npm run babillon:health:web && npm run babillon:health:api",
    "babillon:db:init": "node scripts/babillon-db-init.js",
    "babillon:db:backup": "node scripts/babillon-db-backup.js",
    "babillon:db:restore": "node scripts/babillon-db-restore.js",
    "babillon:db:migrate": "node scripts/babillon-db-migrate.js",
    "babillon:logs:web": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-web",
    "babillon:logs:api": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-api",
    "babillon:logs:agents": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-agents",
    "babillon:logs:h3x": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-h3x-server",
    "babillon:logs:protocol": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-protocol",
    "babillon:logs:lmstudio": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-lmstudio",
    "babillon:logs:mongodb": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-mongodb",
    "babillon:logs:redis": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-redis",
    "babillon:logs:sir": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-sir-controller",
    "babillon:logs:data": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-data-weather babillon-data-financial",
    "babillon:logs:feedback": "docker-compose -f docker-compose.babillon-unified.yml logs -f babillon-feedback-processor",
    "babillon:scale:web": "docker-compose -f docker-compose.babillon-unified.yml up -d --scale babillon-web=3",
    "babillon:scale:api": "docker-compose -f docker-compose.babillon-unified.yml up -d --scale babillon-api=2",
    "babillon:scale:agents": "docker-compose -f docker-compose.babillon-unified.yml up -d --scale babillon-agents=3",
    "babillon:update": "docker-compose -f docker-compose.babillon-unified.yml pull && npm run babillon:unified:restart",
    "babillon:cleanup": "docker system prune -f && docker volume prune -f"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com"
  },
  "dependencies": {
    "axios": "^1.6.2",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^5.0.1",
    "mongodb": "^6.16.0",
    "open": "^10.1.2",
    "redis": "^5.1.1",
    "uuid": "^11.1.0",
    "ws": "^8.18.2",
    "zod": "^3.22.0"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "htmlhint": "^1.1.4",
    "husky": "^9.1.7",
    "jshint": "^2.13.6",
    "lint-staged": "^16.1.0",
    "markdownlint-cli": "^0.37.0",
    "nodemon": "^3.1.7",
    "puppeteer": "^24.10.0"
  }
}
